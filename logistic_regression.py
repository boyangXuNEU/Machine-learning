# -*- coding: utf-8 -*-
"""logistic regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1etWRcy_eTlqR6sW3GcaXr_npuYMxdMoP
"""

import warnings
import pandas as pd
import numpy as np
from collections import OrderedDict
import matplotlib.pyplot as plt
warnings.filterwarnings('ignore')
#创建数据集
dataDict={'学习时间':list(np.arange(0.50,5.50,0.25)),
    '考试成绩':[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]}
dataOrDict=OrderedDict(dataDict)
dataDf=pd.DataFrame(dataOrDict)

dataDf.head()
dataDf.info()
dataDf.describe()

exam_X = dataDf['学习时间']
exam_y = dataDf['考试成绩']
plt.scatter(exam_X,exam_y,color='b',label='dataset')
plt.legend()
plt.xlabel('学习时间')
plt.ylabel('考试成绩')
plt.show()

#拆分训练集和测试集
# 1.拆分训练集和测试集
from sklearn.model_selection import train_test_split

exam_X = exam_X.values.reshape(-1, 1)
exam_y = exam_y.values.reshape(-1, 1)
train_X, test_X, train_y, test_y = train_test_split(exam_X, exam_y, train_size=0.8)
print('训练集数据大小为', train_X.size, train_y.size)
print('测试集数据大小为', test_X.size, test_y.size)

# 2.散点图观察
plt.scatter(train_X, train_y, color='b', label='train datasets')
plt.scatter(test_X, test_y, color='r', label='test dataset')

plt.legend(loc=2)
plt.xlabel('学习时间')
plt.ylabel('考试成绩')
plt.show()

#导入模型
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

#训练模型
model.fit(train_X,train_y)

#模型评分
model.score(test_X,test_y)

b = model.coef_
a = model.intercept_
print('该模型对应的回归函数为:1/(1+exp-(%f+%f*x))'%(a,b))

# 画出相应的逻辑回归曲线
plt.scatter(train_X,train_y,color='b',label='考试数据')
plt.scatter(test_X,test_y,color='r',label='测试数据')
plt.plot(test_X,1/(1+np.exp(-(a+b*test_X))),color='b')
plt.plot(exam_X,1/(1+np.exp(-(a+b*exam_X))),color='r')
plt.legend(loc=2)
plt.xlabel('学习时间')
plt.ylabel('考试成绩')
plt.show()