# -*- coding: utf-8 -*-
"""Linera Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NXh4I2buXgjWOcv7hoIeoK0_lDgiXTGe
"""

from collections import OrderedDict
import pandas as pd
#数据集
examDict={
    '学习时间':[0.50,0.75,1.00,1.25,1.50,1.75,1.75,2.00,2.25,
            2.50,2.75,3.00,3.25,3.50,4.00,4.25,4.50,4.75,5.00,5.50],
    '分数':    [10,  22,  13,  43,  20,  22,  33,  50,  62,  
              48,  55,  75,  62,  73,  81,  76,  64,  82,  90,  93]
}
examOrderDict=OrderedDict(examDict)
examDf=pd.DataFrame(examOrderDict)

examDf.head()

#相关系数
rDf =examDf.corr()
print('相关系数矩阵:')
rDf

#提取特征和标签
#特征features
exam_X = examDf.loc[:,'学习时间']
#标签labels
exam_y = examDf.loc[:,'分数']
print(exam_X)

#绘制散点图
import matplotlib.pyplot as plt
#散点图
plt.scatter(exam_X, exam_y, color="b", label="exam data")
#添加图标标签
plt.xlabel("Hours")
plt.ylabel("Score")
#显示图像
plt.show()

#建立训练数据和测试数据
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(exam_X, exam_y, train_size = .8)
X_train = X_train.values.reshape(-1,1)
y_train = y_train.values.reshape(-1,1)
X_test = X_test.values.reshape(-1,1)
y_test = y_test.values.reshape(-1,1)

#建立训练模型
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train , y_train)

#截距
a = model.intercept_
#回归系数
b = model.coef_

#模型评估:
model.score(X_test, y_test)

plt.scatter(X_train, y_train, color='blue', label="train data")
y_train_pred = model.predict(X_train)
plt.plot(X_train, y_train_pred, color='black', label="best line")
plt.scatter(X_test, y_test, color='red', label="test data")
plt.legend(loc=2)
plt.xlabel("Hours")
plt.ylabel("Score")
plt.show()